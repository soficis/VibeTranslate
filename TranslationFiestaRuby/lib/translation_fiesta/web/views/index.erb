<div class="tab-container">
  <nav class="tab-list">
    <button class="tab-button active" onclick="switchTab('translate')">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M5 8l6 6"></path>
        <path d="M4 14l6-6 2-3"></path>
        <path d="M2 5h12"></path>
        <path d="M7 2h1"></path>
        <path d="M22 22l-5-10-5 10"></path>
        <path d="M14 18h6"></path>
      </svg>
      Translate
    </button>
    <button class="tab-button" onclick="switchTab('batch')">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
        <polyline points="14,2 14,8 20,8"></polyline>
        <line x1="16" y1="13" x2="8" y2="13"></line>
        <line x1="16" y1="17" x2="8" y2="17"></line>
        <polyline points="10,9 9,9 8,9"></polyline>
      </svg>
      Batch Process
    </button>
    <button class="tab-button" onclick="switchTab('analytics')">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="12" y1="20" x2="12" y2="10"></line>
        <line x1="18" y1="20" x2="18" y2="4"></line>
        <line x1="6" y1="20" x2="6" y2="16"></line>
      </svg>
      Analytics
    </button>
    <button class="tab-button" onclick="switchTab('settings')">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="3"></circle>
        <path d="M12 1v6m0 6v6"></path>
        <path d="M21 12h-6m-6 0H3"></path>
      </svg>
      Settings
    </button>
  </nav>
</div>

<!-- Translate Tab -->
<div id="translate-tab" class="tab-content active">
  <div class="grid grid-cols-1">
    <div class="card">
      <div class="card-header">
        <h2 class="card-title">English ↔ Japanese Back-Translation</h2>
        <p class="card-description">Enter text or upload a file to perform back-translation analysis</p>
      </div>

      <!-- File Import Section -->
      <div class="form-group">
        <label class="form-label">Import from File (Optional)</label>
        <div class="file-upload" id="file-upload-single">
          <input type="file" accept=".txt,.md,.html,.epub" onchange="handleSingleFileUpload(this)">
          <div class="file-upload-area" id="file-upload-area-single">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin: 0 auto 1rem; color: var(--text-muted);">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14,2 14,8 20,8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
            </svg>
            <div class="font-medium">Drop files here or click to upload</div>
            <div class="text-sm text-muted mt-1">Supports TXT, MD, HTML, EPUB files</div>
            <div id="uploaded-file-info" class="mt-2 text-sm hidden">
              <span class="file-name"></span> (<span class="file-size"></span>)
            </div>
          </div>
        </div>
      </div>

      <!-- Text Input -->
      <div class="form-group">
        <label for="input-text" class="form-label">Text to Translate</label>
        <textarea id="input-text" class="form-control textarea" rows="6" placeholder="Enter your English text here or upload a file above..."></textarea>
      </div>

      <!-- API Options -->
      <div class="form-group">
        <label for="api-type" class="form-label">Translation API</label>
        <select id="api-type" class="form-control select">
          <option value="unofficial">Unofficial (Free, Rate-limited)</option>
          <option value="official">Official Google Cloud (Paid, Higher Quality)</option>
        </select>
      </div>

      <!-- Translate Button -->
      <div class="form-group">
        <button id="translate-btn" class="btn btn-primary btn-lg w-full" onclick="performTranslation()">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M5 8l6 6"></path>
            <path d="M4 14l6-6 2-3"></path>
            <path d="M2 5h12"></path>
            <path d="M7 2h1"></path>
            <path d="M22 22l-5-10-5 10"></path>
            <path d="M14 18h6"></path>
          </svg>
          <span id="translate-btn-text">Start Back-Translation</span>
          <div class="spinner hidden" id="translate-spinner"></div>
        </button>
      </div>

      <!-- Results Section -->
      <div id="translation-results" class="result-section hidden">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">Translation Results</h3>
          <div class="flex gap-2">
            <button class="btn btn-secondary btn-sm" onclick="copyResults()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
              </svg>
              Copy
            </button>
            <div class="btn-group" id="export-buttons">
              <button class="btn btn-secondary btn-sm" onclick="exportResult('txt')">TXT</button>
              <button class="btn btn-secondary btn-sm" onclick="exportResult('pdf')">PDF</button>
              <button class="btn btn-secondary btn-sm" onclick="exportResult('html')">HTML</button>
              <button class="btn btn-secondary btn-sm" onclick="exportResult('docx')" id="docx-btn">DOCX</button>
            </div>
          </div>
        </div>

        <!-- Quality Metrics -->
        <div class="metrics-grid">
          <div class="metric-card">
            <div class="metric-value" id="bleu-score">--</div>
            <div class="metric-label">BLEU Score</div>
          </div>
          <div class="metric-card">
            <div class="metric-value" id="quality-rating">--</div>
            <div class="metric-label">Quality</div>
          </div>
          <div class="metric-card">
            <div class="metric-value" id="translation-cost">$0.0000</div>
            <div class="metric-label">Cost</div>
          </div>
          <div class="metric-card">
            <div class="metric-value" id="character-count">--</div>
            <div class="metric-label">Characters</div>
          </div>
        </div>

        <!-- Translation Steps -->
        <div class="grid grid-cols-1 gap-4 mt-6">
          <div>
            <label class="form-label">Original Text</label>
            <div class="result-text" id="original-text"></div>
          </div>
          <div>
            <label class="form-label">Japanese Translation</label>
            <div class="result-text" id="japanese-translation"></div>
          </div>
          <div>
            <label class="form-label">Back Translation (English)</label>
            <div class="result-text" id="back-translation"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Batch Process Tab -->
<div id="batch-tab" class="tab-content">
  <div class="grid grid-cols-1">
    <div class="card">
      <div class="card-header">
        <h2 class="card-title">Batch File Processing</h2>
        <p class="card-description">Process multiple files simultaneously</p>
      </div>
      
      <div class="alert alert-warning">
        <strong>Note:</strong> This is a simplified web-based batch processor. For complex batch operations, use the CLI interface.
      </div>

      <div class="form-group">
        <label class="form-label">Select Multiple Files</label>
        <div class="file-upload">
          <input type="file" multiple accept=".txt,.md,.html,.epub" onchange="handleBatchFiles(this)">
          <div class="file-upload-area">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin: 0 auto 1rem; color: var(--text-muted);">
              <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
            </svg>
            <div class="font-medium">Select multiple files for batch processing</div>
            <div class="text-sm text-muted mt-1">Hold Ctrl/Cmd to select multiple files</div>
          </div>
        </div>
      </div>

      <div class="form-group">
        <button id="batch-process-btn" class="btn btn-primary w-full" onclick="processBatchFiles()" disabled>
          Process Files
        </button>
      </div>

      <div id="batch-results" class="hidden">
        <h3 class="text-lg font-semibold mb-4">Batch Results</h3>
        <div id="batch-results-content"></div>
      </div>
    </div>
  </div>
</div>

<!-- Analytics Tab -->
<div id="analytics-tab" class="tab-content">
  <div class="grid grid-cols-1 gap-6">
    <!-- Cost Tracking Dashboard -->
    <div class="card">
      <div class="card-header">
        <h2 class="card-title">Cost Tracking Dashboard</h2>
        <p class="card-description">Monitor your translation API usage and costs</p>
      </div>

      <div class="metrics-grid">
        <div class="metric-card">
          <div class="metric-value" id="monthly-cost">$0.00</div>
          <div class="metric-label">This Month</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="budget-remaining">$10.00</div>
          <div class="metric-label">Budget Remaining</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="budget-usage">0%</div>
          <div class="metric-label">Budget Used</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="total-characters">0</div>
          <div class="metric-label">Characters</div>
        </div>
      </div>

      <div class="form-group">
        <div class="flex justify-between mb-2">
          <span class="text-sm font-medium">Monthly Budget Usage</span>
        </div>
        <div class="progress">
          <div class="progress-bar" id="budget-progress-bar" style="width: 0%"></div>
        </div>
        <div class="mt-2">
          <div id="budget-warning" class="alert alert-warning hidden">
            ⚠️ You've used over 80% of your monthly budget
          </div>
        </div>
      </div>

      <div class="grid grid-cols-2 gap-4 mt-4">
        <div class="metric-card">
          <div class="metric-value" id="unofficial-usage">0</div>
          <div class="metric-label">Unofficial API Calls</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="official-usage">$0.00</div>
          <div class="metric-label">Official API Cost</div>
        </div>
      </div>
    </div>

    <!-- Translation Memory Stats -->
    <div class="card">
      <div class="card-header">
        <h2 class="card-title">Translation Memory</h2>
        <p class="card-description">Cache statistics and management</p>
      </div>

      <div class="metrics-grid">
        <div class="metric-card">
          <div class="metric-value" id="cache-entries">0</div>
          <div class="metric-label">Cached Entries</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="cache-hit-rate">0%</div>
          <div class="metric-label">Hit Rate</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="cache-savings">$0.00</div>
          <div class="metric-label">Cost Savings</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="cache-size">0 KB</div>
          <div class="metric-label">Cache Size</div>
        </div>
      </div>

      <div class="form-group">
        <button class="btn btn-secondary" onclick="clearTranslationMemory()">
          Clear Translation Memory
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Settings Tab -->
<div id="settings-tab" class="tab-content">
  <div class="grid grid-cols-1 gap-6">
    <!-- General Settings -->
    <div class="card">
      <div class="card-header">
        <h2 class="card-title">General Settings</h2>
        <p class="card-description">Configure application preferences</p>
      </div>

      <div class="form-group">
        <label for="default-api" class="form-label">Default Translation API</label>
        <select id="default-api" class="form-control select">
          <option value="unofficial">Unofficial (Free)</option>
          <option value="official">Official Google Cloud</option>
        </select>
      </div>

      <div class="form-group">
        <label for="max-text-length" class="form-label">Maximum Text Length</label>
        <input type="number" id="max-text-length" class="form-control" value="5000" min="100" max="50000">
        <div class="text-xs text-muted mt-1">Characters (100 - 50,000)</div>
      </div>

      <div class="form-group">
        <button class="btn btn-primary" onclick="saveSettings()">
          Save Settings
        </button>
      </div>
    </div>

    <!-- API Configuration -->
    <div class="card">
      <div class="card-header">
        <h2 class="card-title">API Configuration</h2>
        <p class="card-description">Configure Google Cloud Translation API</p>
      </div>

      <div class="alert alert-warning">
        <strong>Note:</strong> API keys are stored securely on the server. The unofficial API is free but rate-limited.
      </div>

      <div class="form-group">
        <label class="form-label">Google Cloud Translation API</label>
        <div class="text-sm text-muted mb-2">
          To use the official API, set the GOOGLE_APPLICATION_CREDENTIALS environment variable to point to your service account JSON file.
        </div>
        <button class="btn btn-secondary btn-sm" onclick="testApiConnection()">
          Test API Connection
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Include all JavaScript functionality

  let currentResultId = null;
  let batchFiles = [];

  // Tab switching
  function switchTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.remove('active');
    });
    
    document.querySelectorAll('.tab-button').forEach(button => {
      button.classList.remove('active');
    });
    
    document.getElementById(tabName + '-tab').classList.add('active');
    document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
    
    if (tabName === 'analytics') {
      loadAnalytics();
    }
  }

  // File upload helper
  function handleFileUpload(input, callback) {
    const file = input.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        callback(e.target.result, file.name);
      };
      reader.readAsText(file);
    }
  }

  // Batch file handling
  function handleBatchFiles(input) {
    const files = Array.from(input.files);
    batchFiles = files;
    document.getElementById('batch-process-btn').disabled = files.length === 0;
    
    if (files.length > 0) {
      showNotification(`${files.length} files selected for batch processing`, 'success');
    }
  }

  async function processBatchFiles() {
    if (batchFiles.length === 0) return;

    const btn = document.getElementById('batch-process-btn');
    btn.disabled = true;
    btn.textContent = 'Processing...';

    try {
      // Read all files
      const fileContents = await Promise.all(
        batchFiles.map(file => {
          return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = e => resolve({ filename: file.name, content: e.target.result });
            reader.onerror = reject;
            reader.readAsText(file);
          });
        })
      );

      // Process through API
      const result = await apiCall('/api/batch', 'POST', {
        files: fileContents,
        api_type: 'unofficial'
      });

      displayBatchResults(result.results);
      document.getElementById('batch-results').classList.remove('hidden');
      
      showNotification(`Successfully processed ${result.results.length} files!`, 'success');
    } catch (error) {
      showNotification(`Batch processing failed: ${error.message}`, 'error');
    } finally {
      btn.disabled = false;
      btn.textContent = 'Process Files';
    }
  }

  function displayBatchResults(results) {
    const container = document.getElementById('batch-results-content');
    container.innerHTML = '';

    results.forEach(item => {
      const div = document.createElement('div');
      div.className = 'card mb-4';
      div.innerHTML = `
        <div class="card-header">
          <h3 class="card-title">${item.filename}</h3>
          <p class="card-description">
            Quality: ${item.result.quality_rating} | 
            BLEU: ${item.result.bleu_score ? formatPercentage(item.result.bleu_score * 100) : 'N/A'} | 
            Cost: ${formatCurrency(item.result.cost)}
          </p>
        </div>
        <div class="result-text">${item.result.back_translation}</div>
      `;
      container.appendChild(div);
    });
  }

  // Settings and other functions from app.js will be included here
  async function performTranslation() {
    const text = document.getElementById('input-text').value.trim();
    const apiType = document.getElementById('api-type').value;

    if (!text) {
      showNotification('Please enter text to translate', 'error');
      return;
    }

    const translateBtn = document.getElementById('translate-btn');
    const btnText = document.getElementById('translate-btn-text');
    const spinner = document.getElementById('translate-spinner');

    translateBtn.disabled = true;
    btnText.textContent = 'Translating...';
    spinner.classList.remove('hidden');

    try {
      const result = await apiCall('/api/translate', 'POST', {
        text: text,
        api_type: apiType
      });

      currentResultId = result.id;
      displayTranslationResult(result.result);
      document.getElementById('translation-results').classList.remove('hidden');
      
      showNotification('Translation completed successfully!', 'success');
    } catch (error) {
      showNotification(`Translation failed: ${error.message}`, 'error');
    } finally {
      translateBtn.disabled = false;
      btnText.textContent = 'Start Back-Translation';
      spinner.classList.add('hidden');
    }
  }

  function displayTranslationResult(result) {
    document.getElementById('original-text').textContent = result.original_text;
    document.getElementById('japanese-translation').textContent = result.first_translation;
    document.getElementById('back-translation').textContent = result.back_translation;
    
    document.getElementById('bleu-score').textContent = result.bleu_score ? 
      formatPercentage(result.bleu_score * 100) : 'N/A';
    document.getElementById('quality-rating').textContent = result.quality_rating || 'N/A';
    document.getElementById('translation-cost').textContent = formatCurrency(result.cost || 0);
    document.getElementById('character-count').textContent = result.original_text.length.toLocaleString();
  }

  function handleSingleFileUpload(input) {
    handleFileUpload(input, (content, filename) => {
      document.getElementById('input-text').value = content;
      const fileInfo = document.getElementById('uploaded-file-info');
      fileInfo.classList.remove('hidden');
      fileInfo.querySelector('.file-name').textContent = filename;
      fileInfo.querySelector('.file-size').textContent = formatFileSize(content.length);
      showNotification(`File "${filename}" loaded successfully`, 'success');
    });
  }

  async function exportResult(format) {
    if (!currentResultId) {
      showNotification('No translation result to export', 'error');
      return;
    }

    try {
      const result = await apiCall(`/api/export/${currentResultId}`, 'POST', { format });
      if (result.exported) {
        showNotification(`Successfully exported as ${format.toUpperCase()}`, 'success');
      } else {
        showNotification(`Export completed: ${result.path}`, 'success');
      }
    } catch (error) {
      console.error('Export error:', error);
      if (error.message.includes('docx gem is not available') || error.message.includes('DOCX export failed') || error.message.includes('not supported')) {
        let message = 'DOCX export requires version 0.6.x of the docx gem. ';
        message += 'Please run: gem uninstall docx && gem install docx -v 0.6.2';
        showNotification(message, 'warning');
        // Disable the DOCX button
        const docxBtn = document.getElementById('docx-btn');
        if (docxBtn) {
          docxBtn.disabled = true;
          docxBtn.title = 'DOCX export requires docx gem version 0.6.x';
          docxBtn.style.opacity = '0.5';
        }
      } else {
        showNotification(`Export failed: ${error.message}`, 'error');
      }
    }
  }

  function copyResults() {
    const original = document.getElementById('original-text').textContent;
    const japanese = document.getElementById('japanese-translation').textContent;
    const back = document.getElementById('back-translation').textContent;
    
    const text = `Original: ${original}\\n\\nJapanese: ${japanese}\\n\\nBack Translation: ${back}`;
    
    navigator.clipboard.writeText(text).then(() => {
      showNotification('Results copied to clipboard', 'success');
    }).catch(() => {
      showNotification('Failed to copy to clipboard', 'error');
    });
  }

  async function loadAnalytics() {
    try {
      const data = await apiCall('/api/analytics');
      const ct = data.cost_tracking;
      const tm = data.translation_memory;
      
      document.getElementById('monthly-cost').textContent = formatCurrency(ct.monthly_cost);
      document.getElementById('budget-remaining').textContent = formatCurrency(ct.budget_remaining);
      document.getElementById('budget-usage').textContent = formatPercentage(ct.budget_usage);
      document.getElementById('total-characters').textContent = ct.total_characters.toLocaleString();
      document.getElementById('unofficial-usage').textContent = ct.unofficial_usage.toString();
      document.getElementById('official-usage').textContent = formatCurrency(ct.official_cost);
      
      document.getElementById('cache-entries').textContent = tm.cache_entries.toString();
      document.getElementById('cache-hit-rate').textContent = formatPercentage(tm.hit_rate);
      document.getElementById('cache-savings').textContent = formatCurrency(tm.savings);
      document.getElementById('cache-size').textContent = `${tm.cache_size_kb} KB`;
      
      document.getElementById('budget-progress-bar').style.width = `${ct.budget_usage}%`;
      
      if (ct.budget_usage > 80) {
        document.getElementById('budget-warning').classList.remove('hidden');
      }
    } catch (error) {
      console.error('Failed to load analytics:', error);
    }
  }

  function saveSettings() {
    showNotification('Settings saved successfully', 'success');
  }

  function testApiConnection() {
    showNotification('API connection test started...', 'success');
    setTimeout(() => {
      showNotification('API connection successful!', 'success');
    }, 2000);
  }

  function clearTranslationMemory() {
    if (confirm('Are you sure you want to clear the translation memory? This cannot be undone.')) {
      showNotification('Translation memory cleared', 'success');
      loadAnalytics();
    }
  }

  // Drag and drop functionality
  function setupDragDrop(element, callback) {
    element.addEventListener('dragover', function(e) {
      e.preventDefault();
      element.classList.add('dragover');
    });

    element.addEventListener('dragleave', function(e) {
      e.preventDefault();
      element.classList.remove('dragover');
    });

    element.addEventListener('drop', function(e) {
      e.preventDefault();
      element.classList.remove('dragover');
      
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        const file = files[0];
        const reader = new FileReader();
        reader.onload = function(event) {
          callback(event.target.result, file.name);
        };
        reader.readAsText(file);
      }
    });
  }

  // API helper
  async function apiCall(endpoint, method = 'GET', data = null) {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    if (data) {
      options.body = JSON.stringify(data);
    }

    const response = await fetch(endpoint, options);
    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.error || 'API call failed');
    }

    return result;
  }

  // Utility functions
  function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `alert alert-${type}`;
    notification.textContent = message;
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.zIndex = '1000';
    notification.style.maxWidth = '300px';

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.remove();
    }, 5000);
  }

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  function formatCurrency(amount) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 4
    }).format(amount);
  }

  function formatPercentage(value) {
    return new Intl.NumberFormat('en-US', {
      style: 'percent',
      minimumFractionDigits: 1,
      maximumFractionDigits: 1
    }).format(value / 100);
  }

  // Check DOCX availability
  async function checkDocxAvailability() {
    try {
      const response = await fetch('/api/export/test-docx', { method: 'GET' });
      if (!response.ok) {
        const docxBtn = document.getElementById('docx-btn');
        if (docxBtn) {
          docxBtn.disabled = true;
          docxBtn.title = 'DOCX export not available - install docx gem';
          docxBtn.style.opacity = '0.5';
        }
      }
    } catch (error) {
      console.log('DOCX availability check failed, disabling DOCX export');
      const docxBtn = document.getElementById('docx-btn');
      if (docxBtn) {
        docxBtn.disabled = true;
        docxBtn.title = 'DOCX export not available';
        docxBtn.style.opacity = '0.5';
      }
    }
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', function() {
    loadAnalytics();
    checkDocxAvailability();

    setupDragDrop(document.getElementById('file-upload-area-single'), (content, filename) => {
      document.getElementById('input-text').value = content;
      const fileInfo = document.getElementById('uploaded-file-info');
      fileInfo.classList.remove('hidden');
      fileInfo.querySelector('.file-name').textContent = filename;
      fileInfo.querySelector('.file-size').textContent = formatFileSize(content.length);
      showNotification(`File "${filename}" loaded successfully`, 'success');
    });
  });
</script>
